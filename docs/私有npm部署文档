介绍：为搭建前端组件库，防止代码开源到社区公共库，需搭建私有npm服务器，本服务基于verdaccio包进行搭建，以下方案在window系统中已进行测试可行，现需要运维同学进行在服务器上搭建相应服务，望支持。

## 服务器搭建
##### 下面的linux我也不熟，从网上找的，只作为参考。
#### 1. 安装node环境
下载最新的node环境，下载地址：[https://nodejs.org/en/download/current/][https://nodejs.org/en/download/current]
安装命令：解压安装，版本号自己变一下，然后配置一下环境变量，比较简单这里不多说了。

        tar -xvf node-v11.10.0-linux-x64.tar.gz
#### 2. 安装verdaccio
加上–unsafe-perm的原因是防止报grywarn权限的错。

        npm install -g verdaccio --unsafe-perm
#### 3. 配置
##### 3.1 修改配置文件
verdaccio 的特点是，你在哪个目录运行，它的就会在对应的目录下创建自己的文件。目录下默认有两个文件：config.yaml和storage，htpasswd 是添加用户之后自动创建的；
由于第一次启动默认的config.xml文件是从原始文件default.yaml拷贝而来，可先修改verdaccio 原始的default.yaml。
地址：verdaccio 安装目录/conf/ default.yaml。
打开默认启动的config.yaml文件。

    vim /home/admin/.config/verdaccio/config.yaml

在配置文件最后添加监听端口，配置文件详解请见文末尾

    listen: 0.0.0.0:4873                    # listen on all addresses 
    
#### 3.2. 对外开放4873端口
verdaccio部署环境时，需要使用端口号4873。

    firewall-cmd --state                # 先查看防火墙状态，
    service firewalld start              # 开启防火墙:
    firewall-cmd --zone=public --add-port=4873/tcp –permanent  #开放4873端口
    firewall-cmd --reload              #重新载入
    firewall-cmd --zone=public --query-port=4873/tcp    #查看是否添加成功

### 4.启动verdaccio

#### 4.1.verdaccio直接启动
命令：

    verdaccio
// 显示信息，
- 第一句是配置文件的地址，
- 第二句，访问给的地址便可以看到我们的私服已经搭建成功了。
当我们打开页面还可以看到服务器这边有访问记录，控制台的日志一直在打。

    verdaccio doesn‘t need superuser privileges. Don‘t run it und
    warn — config file - /home/admin/.config/verdaccio/config.yaml
    warn — http address - http://localhost:4873/ - verdaccio/


附配置文件config.yaml
配置文件原文：

    storage: ./storage
    auth:
    htpasswd:
       file: /.htpasswd
    uplinks:
    npmjs:
       url: http://registry.npmjs.org/
    packages:
    '@*/*':
       access: $all
       publish: $authenticated
    '*':
       access: $all
       publish: $authenticated
       proxy: npmjs
    logs:
    - {type: stdout, format: pretty, level: http}
    listen: 0.0.0.0:4873
    http_proxy: http://代理服务器ip:8080
    https_proxy: http://代理服务器ip:8080
常用配置详解：

- storage： 仓库保存的地址，publish时仓库保存的地址。

- auth：
    - htpasswd file：账号密码的文件地址，初始化时不存在，可指定需要手工创建。 
    - max_users：默认1000，为允许用户注册的数量。为-1时，不允许用户通过npm adduser注册。但是，当为-1时，可以通过直接编写htpasswd file内容的方式添加用户。
        - 语法：用户名:{SHA}哈希加密的字符=:autocreated 时间
        - 加密算法：SHA1哈稀之后再转换成 Base64 输出就好
    - uplinks: 配置上游的npm服务器，主要用于请求的仓库不存在时到上游服务器去拉取。
    - packages: 配置模块。access访问下载权限,publish包的发布权限。格式如下： 
        - scope:  权限：操作 
        - scope:两种模式 
        - 一种是 @/ 表示某下属的某项目
        - 一种是 * 匹配项目名称(名称在package.json中有定义)
            - 权限： 
                -  access: 表示哪一类用户可以对匹配的项目进行安装(install)
                -  publish: 表示哪一类用户可以对匹配的项目进行发布(publish)
                -  proxy: 如其名，这里的值是对应于 uplinks 的名称，如果本地不存在，允许去对应的uplinks去取。
            - 操作：
                
                - $all 表示所有人(已注册、未注册)都可以执行对应的操作
                - $authenticated 表示只有通过验证的人(已注册)可以执行对应操作，注意，任何人都可以去注册账户。
                - $anonymous 表示只有匿名者可以进行对应操作（通常无用）
                - 或者也可以指定对应于之前我们配置的用户表 htpasswd 中的一个或多个用户，这样就明确地指定哪些用户可以执行匹配的操作 
                听端口和主机名。 
                
                        localhost:4873 　　　　 #默认
                        0.0.0.0:4873　　　　　　 #在所有网卡监听
- 代理

        #http_proxy: http://something.local/  #http代理
        #https_proxy: https://something.local/  #https代理
        #no_proxy: localhost,127.0.0.1  #不适用代理的iP
        
修改了配置文件后，运行命令 
$ verdaccio -c config.yml
